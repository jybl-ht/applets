{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nvar fs = require('fs');\nvar path = require('path');\n\nvar isPlainObject = require('is-plain-object');\nvar pick = require('object.pick');\nvar defaults = require('object.defaults/immutable');\nvar expandTilde = require('expand-tilde');\nvar parsePath = require('parse-filepath');\n\n\nfunction fined(pathObj, defaultObj) {\n  var expandedPath = expandPath(pathObj, defaultObj);\n  return expandedPath ? findWithExpandedPath(expandedPath) : null;\n}\n\nfunction expandPath(pathObj, defaultObj) {\n  if (!isPlainObject(defaultObj)) {\n    defaultObj = {};\n  }\n\n  if (isString(pathObj)) {\n    pathObj = { path: pathObj };\n  }\n\n  if (!isPlainObject(pathObj)) {\n    pathObj = {};\n  }\n\n  pathObj = defaults(pathObj, defaultObj);\n\n  var filePath;\n  if (!isString(pathObj.path)) {\n    return null;\n  }\n  // Execution of toString is for a String object.\n  if (isString(pathObj.name) && pathObj.name) {\n    if (pathObj.path) {\n      filePath = expandTilde(pathObj.path.toString());\n      filePath = path.join(filePath, pathObj.name.toString());\n    } else {\n      filePath = pathObj.name.toString();\n    }\n  } else {\n    filePath = expandTilde(pathObj.path.toString());\n  }\n\n  var extArr = createExtensionArray(pathObj.extensions);\n  var extMap = createExtensionMap(pathObj.extensions);\n\n  var basedir = isString(pathObj.cwd) ? pathObj.cwd.toString() : '.';\n  basedir = path.resolve(expandTilde(basedir));\n\n  var findUp = !!pathObj.findUp;\n\n  var parsed = parsePath(filePath);\n  if (parsed.isAbsolute) {\n    filePath = filePath.slice(parsed.root.length);\n    findUp = false;\n    basedir = parsed.root;\n  /* istanbul ignore if */\n  } else if (parsed.root) { // Expanded path has a drive letter on Windows.\n    filePath = filePath.slice(parsed.root.length);\n    basedir = path.resolve(parsed.root);\n  }\n\n  if (parsed.ext) {\n    filePath = filePath.slice(0, -parsed.ext.length);\n    // This ensures that only the original extension is matched.\n    extArr = [parsed.ext];\n  }\n\n  return {\n    path: filePath,\n    basedir: basedir,\n    findUp: findUp,\n    extArr: extArr,\n    extMap: extMap,\n  };\n}\n\nfunction findWithExpandedPath(expanded) {\n  var found = expanded.findUp ?\n    findUpFile(expanded.basedir, expanded.path, expanded.extArr) :\n    findFile(expanded.basedir, expanded.path, expanded.extArr);\n\n  if (!found) {\n    return null;\n  }\n\n  if (expanded.extMap) {\n    found.extension = pick(expanded.extMap, found.extension);\n  }\n  return found;\n}\n\nfunction findFile(basedir, relpath, extArr) {\n  var noExtPath = path.resolve(basedir, relpath);\n  for (var i = 0, n = extArr.length; i < n; i++) {\n    var filepath = noExtPath + extArr[i];\n    try {\n      fs.statSync(filepath);\n      return { path: filepath, extension: extArr[i] };\n    } catch (e) {\n      // Ignore error\n    }\n  }\n\n  return null;\n}\n\nfunction findUpFile(basedir, filepath, extArr) {\n  var lastdir;\n  do {\n    var found = findFile(basedir, filepath, extArr);\n    if (found) {\n      return found;\n    }\n\n    lastdir = basedir;\n    basedir = path.dirname(basedir);\n  } while (lastdir !== basedir);\n\n  return null;\n}\n\nfunction createExtensionArray(exts) {\n  if (isString(exts)) {\n    return [exts];\n  }\n\n  if (Array.isArray(exts)) {\n    exts = exts.filter(isString);\n    return (exts.length > 0) ? exts : [''];\n  }\n\n  if (isPlainObject(exts)) {\n    exts = Object.keys(exts);\n    return (exts.length > 0) ? exts : [''];\n  }\n\n  return [''];\n}\n\nfunction createExtensionMap(exts) {\n  if (!isPlainObject(exts)) {\n    return null;\n  }\n\n  if (isEmpty(exts)) {\n    return { '': null };\n  }\n\n  return exts;\n}\n\nfunction isEmpty(object) {\n  return !Object.keys(object).length;\n}\n\nfunction isString(value) {\n  if (typeof value === 'string') {\n    return true;\n  }\n\n  if (Object.prototype.toString.call(value) === '[object String]') {\n    return true;\n  }\n\n  return false;\n}\n\nmodule.exports = fined;\n"]}