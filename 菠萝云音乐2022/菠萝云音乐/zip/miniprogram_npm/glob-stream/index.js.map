{"version":3,"sources":["index.js","readable.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nvar Combine = require('ordered-read-streams');\nvar unique = require('unique-stream');\nvar pumpify = require('pumpify');\nvar isNegatedGlob = require('is-negated-glob');\nvar extend = require('extend');\n\nvar GlobStream = require('./readable');\n\nfunction globStream(globs, opt) {\n  if (!opt) {\n    opt = {};\n  }\n\n  var ourOpt = extend({}, opt);\n  var ignore = ourOpt.ignore;\n\n  ourOpt.cwd = typeof ourOpt.cwd === 'string' ? ourOpt.cwd : process.cwd();\n  ourOpt.dot = typeof ourOpt.dot === 'boolean' ? ourOpt.dot : false;\n  ourOpt.silent = typeof ourOpt.silent === 'boolean' ? ourOpt.silent : true;\n  ourOpt.cwdbase = typeof ourOpt.cwdbase === 'boolean' ? ourOpt.cwdbase : false;\n  ourOpt.uniqueBy =  typeof ourOpt.uniqueBy === 'string' ||\n                    typeof ourOpt.uniqueBy === 'function' ? ourOpt.uniqueBy : 'path';\n\n  if (ourOpt.cwdbase) {\n    ourOpt.base = ourOpt.cwd;\n  }\n  // Normalize string `ignore` to array\n  if (typeof ignore === 'string') {\n    ignore = [ignore];\n  }\n  // Ensure `ignore` is an array\n  if (!Array.isArray(ignore)) {\n    ignore = [];\n  }\n\n  // Only one glob no need to aggregate\n  if (!Array.isArray(globs)) {\n    globs = [globs];\n  }\n\n  var positives = [];\n  var negatives = [];\n\n  globs.forEach(sortGlobs);\n\n  function sortGlobs(globString, index) {\n    if (typeof globString !== 'string') {\n      throw new Error('Invalid glob at index ' + index);\n    }\n\n    var glob = isNegatedGlob(globString);\n    var globArray = glob.negated ? negatives : positives;\n\n    globArray.push({\n      index: index,\n      glob: glob.pattern,\n    });\n  }\n\n  if (positives.length === 0) {\n    throw new Error('Missing positive glob');\n  }\n\n  // Create all individual streams\n  var streams = positives.map(streamFromPositive);\n\n  // Then just pipe them to a single unique stream and return it\n  var aggregate = new Combine(streams);\n  var uniqueStream = unique(ourOpt.uniqueBy);\n\n  return pumpify.obj(aggregate, uniqueStream);\n\n  function streamFromPositive(positive) {\n    var negativeGlobs = negatives\n      .filter(indexGreaterThan(positive.index))\n      .map(toGlob)\n      .concat(ignore);\n    return new GlobStream(positive.glob, negativeGlobs, ourOpt);\n  }\n}\n\nfunction indexGreaterThan(index) {\n  return function(obj) {\n    return obj.index > index;\n  };\n}\n\nfunction toGlob(obj) {\n  return obj.glob;\n}\n\nmodule.exports = globStream;\n","\n\nvar inherits = require('util').inherits;\n\nvar glob = require('glob');\nvar extend = require('extend');\nvar Readable = require('readable-stream').Readable;\nvar globParent = require('glob-parent');\nvar toAbsoluteGlob = require('to-absolute-glob');\nvar removeTrailingSeparator = require('remove-trailing-separator');\n\nvar globErrMessage1 = 'File not found with singular glob: ';\nvar globErrMessage2 = ' (if this was purposeful, use `allowEmpty` option)';\n\nfunction getBasePath(ourGlob, opt) {\n  return globParent(toAbsoluteGlob(ourGlob, opt));\n}\n\nfunction globIsSingular(glob) {\n  var globSet = glob.minimatch.set;\n  if (globSet.length !== 1) {\n    return false;\n  }\n\n  return globSet[0].every(function isString(value) {\n    return typeof value === 'string';\n  });\n}\n\nfunction GlobStream(ourGlob, negatives, opt) {\n  if (!(this instanceof GlobStream)) {\n    return new GlobStream(ourGlob, negatives, opt);\n  }\n\n  var ourOpt = extend({}, opt);\n\n  Readable.call(this, {\n    objectMode: true,\n    highWaterMark: ourOpt.highWaterMark || 16,\n  });\n\n  // Delete `highWaterMark` after inheriting from Readable\n  delete ourOpt.highWaterMark;\n\n  var self = this;\n\n  function resolveNegatives(negative) {\n    return toAbsoluteGlob(negative, ourOpt);\n  }\n\n  var ourNegatives = negatives.map(resolveNegatives);\n  ourOpt.ignore = ourNegatives;\n\n  var cwd = ourOpt.cwd;\n  var allowEmpty = ourOpt.allowEmpty || false;\n\n  // Extract base path from glob\n  var basePath = ourOpt.base || getBasePath(ourGlob, ourOpt);\n\n  // Remove path relativity to make globs make sense\n  ourGlob = toAbsoluteGlob(ourGlob, ourOpt);\n  // Delete `root` after all resolving done\n  delete ourOpt.root;\n\n  var globber = new glob.Glob(ourGlob, ourOpt);\n  this._globber = globber;\n\n  var found = false;\n\n  globber.on('match', function(filepath) {\n    found = true;\n    var obj = {\n      cwd: cwd,\n      base: basePath,\n      path: removeTrailingSeparator(filepath),\n    };\n    if (!self.push(obj)) {\n      globber.pause();\n    }\n  });\n\n  globber.once('end', function() {\n    if (allowEmpty !== true && !found && globIsSingular(globber)) {\n      var err = new Error(globErrMessage1 + ourGlob + globErrMessage2);\n\n      return self.destroy(err);\n    }\n\n    self.push(null);\n  });\n\n  function onError(err) {\n    self.destroy(err);\n  }\n\n  globber.once('error', onError);\n}\ninherits(GlobStream, Readable);\n\nGlobStream.prototype._read = function() {\n  this._globber.resume();\n};\n\nGlobStream.prototype.destroy = function(err) {\n  var self = this;\n\n  this._globber.abort();\n\n  process.nextTick(function() {\n    if (err) {\n      self.emit('error', err);\n    }\n    self.emit('close');\n  });\n};\n\nmodule.exports = GlobStream;\n"]}