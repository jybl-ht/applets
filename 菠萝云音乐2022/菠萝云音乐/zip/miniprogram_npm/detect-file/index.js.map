{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/*!\n * detect-file <https://github.com/doowb/detect-file>\n *\n * Copyright (c) 2016-2017, Brian Woodward.\n * Released under the MIT License.\n */\n\n\n\nvar fs = require('fs');\nvar path = require('path');\n\n/**\n * Detect the given `filepath` if it exists.\n *\n * ```js\n * var res = detect('package.json');\n * console.log(res);\n * //=> \"package.json\"\n *\n * var res = detect('fake-file.json');\n * console.log(res)\n * //=> null\n * ```\n *\n * @param  {String} `filepath` filepath to detect.\n * @param  {Object} `options` Additional options.\n * @param  {Boolean} `options.nocase` Set this to `true` to force case-insensitive filename checks. This is useful on case sensitive file systems.\n * @return {String} Returns the detected filepath if it exists, otherwise returns `null`.\n * @api public\n */\n\nmodule.exports = function detect(filepath, options) {\n  if (!filepath || (typeof filepath !== 'string')) {\n    return null;\n  }\n  if (fs.existsSync(filepath)) {\n    return path.resolve(filepath);\n  }\n\n  options = options || {};\n  if (options.nocase === true) {\n    return nocase(filepath);\n  }\n  return null;\n};\n\n/**\n * Check if the filepath exists by falling back to reading in the entire directory.\n * Returns the real filepath (for case sensitive file systems) if found.\n *\n * @param  {String} `filepath` filepath to check.\n * @return {String} Returns found filepath if exists, otherwise null.\n */\n\nfunction nocase(filepath) {\n  filepath = path.resolve(filepath);\n  var res = tryReaddir(filepath);\n  if (res === null) {\n    return null;\n  }\n\n  // \"filepath\" is a directory, an error would be\n  // thrown if it doesn't exist. if we're here, it exists\n  if (res.path === filepath) {\n    return res.path;\n  }\n\n  // \"filepath\" is not a directory\n  // compare against upper case later\n  // see https://nodejs.org/en/docs/guides/working-with-different-filesystems/\n  var upper = filepath.toUpperCase();\n  var len = res.files.length;\n  var idx = -1;\n\n  while (++idx < len) {\n    var fp = path.resolve(res.path, res.files[idx]);\n    if (filepath === fp || upper === fp) {\n      return fp;\n    }\n    var fpUpper = fp.toUpperCase();\n    if (filepath === fpUpper || upper === fpUpper) {\n      return fp;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Try to read the filepath as a directory first, then fallback to the filepath's dirname.\n *\n * @param  {String} `filepath` path of the directory to read.\n * @return {Object} Object containing `path` and `files` if succesful. Otherwise, null.\n */\n\nfunction tryReaddir(filepath) {\n  var ctx = { path: filepath, files: [] };\n  try {\n    ctx.files = fs.readdirSync(filepath);\n    return ctx;\n  } catch (err) {}\n  try {\n    ctx.path = path.dirname(filepath);\n    ctx.files = fs.readdirSync(ctx.path);\n    return ctx;\n  } catch (err) {}\n  return null;\n}\n"]}