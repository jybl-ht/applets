{"version":3,"sources":["index.js","lib/series.js","lib/helpers.js","lib/parallel.js","lib/settleSeries.js","lib/settleParallel.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA,AGTA;AFOA,ACHA,AFMA,AGTA;AFOA,ACHA,AFMA,AGTA;AFOA,ACHA,AFMA,AIZA,ADGA;AFOA,ACHA,AFMA,AIZA,ADGA;AFOA,ACHA,AFMA,AIZA,ADGA;AFOA,ACHA,AFMA,AIZA,ADGA;AFOA,ACHA,AFMA,AIZA,ADGA;AFOA,ACHA,AFMA,AIZA,ADGA;AFOA,ACHA,AFMA,AIZA,ADGA;AFOA,ACHA,AFMA,AIZA,ADGA;AFOA,ACHA,AFMA,AIZA,ADGA;AFOA,ACHA,AFMA,AIZA,ADGA;AFOA,ACHA,AFMA,AIZA,ADGA;AFOA,ACHA,AFMA,AIZA,ADGA;AFOA,ACHA,AFMA,AIZA,ADGA;AFOA,ACHA,AFMA,AIZA,ADGA;AFOA,ACHA,AFMA,AIZA,ADGA;AFOA,ACHA,AFMA,AIZA,ADGA;AFOA,ACHA,AFMA,AIZA,ADGA;AFOA,ACHA,AFMA,AIZA,ADGA;AFOA,ACHA,AFMA,AIZA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nmodule.exports = {\n  series: require('./lib/series'),\n  parallel: require('./lib/parallel'),\n  settleSeries: require('./lib/settleSeries'),\n  settleParallel: require('./lib/settleParallel'),\n};\n","\n\nvar initial = require('array-initial');\nvar last = require('array-last');\nvar asyncDone = require('async-done');\nvar nowAndLater = require('now-and-later');\n\nvar helpers = require('./helpers');\n\nfunction iterator(fn, key, cb) {\n  return asyncDone(fn, cb);\n}\n\nfunction buildSeries() {\n  var args = helpers.verifyArguments(arguments);\n\n  var extensions = helpers.getExtensions(last(args));\n\n  if (extensions) {\n    args = initial(args);\n  }\n\n  function series(done) {\n    nowAndLater.mapSeries(args, iterator, extensions, done);\n  }\n\n  return series;\n}\n\nmodule.exports = buildSeries;\n","\n\nvar assert = require('assert');\n\nvar filter = require('arr-filter');\nvar map = require('arr-map');\nvar flatten = require('arr-flatten');\nvar forEach = require('array-each');\n\nfunction noop() {}\n\nfunction getExtensions(lastArg) {\n  if (typeof lastArg !== 'function') {\n    return lastArg;\n  }\n}\n\nfunction filterSuccess(elem) {\n  return elem.state === 'success';\n}\n\nfunction filterError(elem) {\n  return elem.state === 'error';\n}\n\nfunction buildOnSettled(done) {\n  if (typeof done !== 'function') {\n    done = noop;\n  }\n\n  function onSettled(error, result) {\n    if (error) {\n      return done(error, null);\n    }\n\n    var settledErrors = filter(result, filterError);\n    var settledResults = filter(result, filterSuccess);\n\n    var errors = null;\n    if (settledErrors.length) {\n      errors = map(settledErrors, 'value');\n    }\n\n    var results = null;\n    if (settledResults.length) {\n      results = map(settledResults, 'value');\n    }\n\n    done(errors, results);\n  }\n\n  return onSettled;\n}\n\nfunction verifyArguments(args) {\n  args = flatten(args);\n  var lastIdx = args.length - 1;\n\n  assert.ok(args.length, 'A set of functions to combine is required');\n\n  forEach(args, function(arg, argIdx) {\n    var isFunction = typeof arg === 'function';\n    if (isFunction) {\n      return;\n    }\n\n    if (argIdx === lastIdx) {\n      // Last arg can be an object of extension points\n      return;\n    }\n\n    var msg = 'Only functions can be combined, got ' + typeof arg +\n      ' for argument ' + argIdx;\n    assert.ok(isFunction, msg);\n  });\n\n  return args;\n}\n\nmodule.exports = {\n  getExtensions: getExtensions,\n  onSettled: buildOnSettled,\n  verifyArguments: verifyArguments,\n};\n","\n\nvar initial = require('array-initial');\nvar last = require('array-last');\nvar asyncDone = require('async-done');\nvar nowAndLater = require('now-and-later');\n\nvar helpers = require('./helpers');\n\nfunction iterator(fn, key, cb) {\n  return asyncDone(fn, cb);\n}\n\nfunction buildParallel() {\n  var args = helpers.verifyArguments(arguments);\n\n  var extensions = helpers.getExtensions(last(args));\n\n  if (extensions) {\n    args = initial(args);\n  }\n\n  function parallel(done) {\n    nowAndLater.map(args, iterator, extensions, done);\n  }\n\n  return parallel;\n}\n\nmodule.exports = buildParallel;\n","\n\nvar initial = require('array-initial');\nvar last = require('array-last');\nvar asyncSettle = require('async-settle');\nvar nowAndLater = require('now-and-later');\n\nvar helpers = require('./helpers');\n\nfunction iterator(fn, key, cb) {\n  return asyncSettle(fn, cb);\n}\n\nfunction buildSettleSeries() {\n  var args = helpers.verifyArguments(arguments);\n\n  var extensions = helpers.getExtensions(last(args));\n\n  if (extensions) {\n    args = initial(args);\n  }\n\n  function settleSeries(done) {\n    var onSettled = helpers.onSettled(done);\n    nowAndLater.mapSeries(args, iterator, extensions, onSettled);\n  }\n\n  return settleSeries;\n}\n\nmodule.exports = buildSettleSeries;\n","\n\nvar initial = require('array-initial');\nvar last = require('array-last');\nvar asyncSettle = require('async-settle');\nvar nowAndLater = require('now-and-later');\n\nvar helpers = require('./helpers');\n\nfunction iterator(fn, key, cb) {\n  return asyncSettle(fn, cb);\n}\n\nfunction buildSettleParallel() {\n  var args = helpers.verifyArguments(arguments);\n\n  var extensions = helpers.getExtensions(last(args));\n\n  if (extensions) {\n    args = initial(args);\n  }\n\n  function settleParallel(done) {\n    var onSettled = helpers.onSettled(done);\n    nowAndLater.map(args, iterator, extensions, onSettled);\n  }\n\n  return settleParallel;\n}\n\nmodule.exports = buildSettleParallel;\n"]}