{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nvar domain = require('domain');\n\nvar eos = require('end-of-stream');\nvar p = require('process-nextick-args');\nvar once = require('once');\nvar exhaust = require('stream-exhaust');\n\nvar eosConfig = {\n  error: false,\n};\n\nfunction rethrowAsync(err) {\n  process.nextTick(rethrow);\n\n  function rethrow() {\n    throw err;\n  }\n}\n\nfunction tryCatch(fn, args) {\n  try {\n    return fn.apply(null, args);\n  } catch (err) {\n    rethrowAsync(err);\n  }\n}\n\nfunction asyncDone(fn, cb) {\n  cb = once(cb);\n\n  var d = domain.create();\n  d.once('error', onError);\n  var domainBoundFn = d.bind(fn);\n\n  function done() {\n    d.removeListener('error', onError);\n    d.exit();\n    return tryCatch(cb, arguments);\n  }\n\n  function onSuccess(result) {\n    done(null, result);\n  }\n\n  function onError(error) {\n    if (!error) {\n      error = new Error('Promise rejected without Error');\n    }\n    done(error);\n  }\n\n  function asyncRunner() {\n    var result = domainBoundFn(done);\n\n    function onNext(state) {\n      onNext.state = state;\n    }\n\n    function onCompleted() {\n      onSuccess(onNext.state);\n    }\n\n    if (result && typeof result.on === 'function') {\n      // Assume node stream\n      d.add(result);\n      eos(exhaust(result), eosConfig, done);\n      return;\n    }\n\n    if (result && typeof result.subscribe === 'function') {\n      // Assume RxJS observable\n      result.subscribe(onNext, onError, onCompleted);\n      return;\n    }\n\n    if (result && typeof result.then === 'function') {\n      // Assume promise\n      result.then(onSuccess, onError);\n      return;\n    }\n  }\n\n  p.nextTick(asyncRunner);\n}\n\nmodule.exports = asyncDone;\n"]}