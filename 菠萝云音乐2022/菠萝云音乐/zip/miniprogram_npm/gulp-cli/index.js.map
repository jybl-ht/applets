{"version":3,"sources":["index.js","lib/shared/ansi.js","lib/shared/exit.js","lib/shared/tildify.js","lib/shared/make-title.js","lib/shared/cli-options.js","lib/shared/completion.js","lib/shared/verify-dependencies.js","package.json","lib/shared/get-blacklist.js","lib/shared/log/to-console.js","lib/shared/config/load-files.js","lib/shared/config/cli-flags.js","lib/shared/config/env-flags.js","lib/shared/log/verify.js","lib/shared/log/blacklist-error.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,AENA,ADGA;AHUA,ACHA,ACHA,AENA,ADGA;AHUA,ACHA,ACHA,AENA,ADGA;AHUA,ACHA,AIZA,AHSA,AENA,ADGA;AHUA,ACHA,AIZA,AHSA,AENA,ADGA;AHUA,ACHA,AIZA,AHSA,AENA,ADGA;AHUA,ACHA,AIZA,ACHA,AJYA,AENA,ADGA;AHUA,ACHA,AIZA,ACHA,AJYA,AENA;AJaA,ACHA,AIZA,ACHA,AJYA,AENA;AJaA,ACHA,AIZA,ACHA,AJYA,AENA,AGTA;APsBA,ACHA,AIZA,ACHA,AFMA,AGTA;APsBA,ACHA,AIZA,ACHA,AFMA,AGTA;APsBA,ACHA,AIZA,ACHA,ACHA,ACHA;ARyBA,ACHA,AIZA,ACHA,ACHA,ACHA;ARyBA,ACHA,AIZA,ACHA,ACHA,ACHA;ARyBA,ACHA,AIZA,ACHA,AGTA,AFMA,ACHA;ARyBA,ACHA,AIZA,ACHA,AGTA,AFMA,ACHA;ARyBA,ACHA,AIZA,ACHA,AGTA,AFMA,ACHA;ARyBA,ACHA,AIZA,ACHA,AGTA,ACHA,AHSA,ACHA;ARyBA,ACHA,AIZA,ACHA,AGTA,ACHA,AHSA,ACHA;ARyBA,ACHA,AIZA,ACHA,AGTA,ACHA,AHSA,ACHA;ARyBA,ACHA,AIZA,ACHA,AKfA,AFMA,ACHA,AHSA,ACHA;ARyBA,ACHA,AIZA,ACHA,AKfA,AFMA,ACHA,AHSA,ACHA;ARyBA,ACHA,AIZA,ACHA,AKfA,AFMA,ACHA,AHSA,ACHA;ARyBA,ACHA,AIZA,ACHA,AMlBA,ADGA,AFMA,ACHA,AHSA,ACHA;ARyBA,ACHA,AIZA,ACHA,AMlBA,ADGA,AFMA,ACHA,AHSA,ACHA;ARyBA,ACHA,AIZA,ACHA,AMlBA,ADGA,AFMA,ACHA,AHSA,ACHA;ARyBA,ACHA,AIZA,ACHA,AMlBA,ACHA,AFMA,AFMA,ACHA,AHSA,ACHA;ARyBA,ACHA,AIZA,ACHA,AMlBA,ACHA,AFMA,AFMA,ACHA,AHSA,ACHA;ARyBA,ACHA,AIZA,AOrBA,ACHA,AFMA,AFMA,ACHA,AHSA,ACHA;ARyBA,ACHA,AIZA,AOrBA,ACHA,AFMA,AFMA,ACHA,AIZA,APqBA,ACHA;ARyBA,ACHA,AIZA,AOrBA,ACHA,AFMA,AFMA,ACHA,AIZA,APqBA,ACHA;ARyBA,ACHA,AIZA,AOrBA,ACHA,AFMA,AFMA,ACHA,AIZA,APqBA,ACHA;ARyBA,AKfA,AOrBA,ACHA,AFMA,AFMA,AMlBA,ALeA,AIZA,APqBA,ACHA;ARyBA,AKfA,AOrBA,ACHA,AFMA,AFMA,AMlBA,ALeA,AIZA,APqBA,ACHA;ARyBA,AKfA,AOrBA,ACHA,AFMA,AFMA,AMlBA,ALeA,AIZA,ANkBA;ARyBA,AKfA,AOrBA,ACHA,AFMA,AFMA,AMlBA,ALeA,AIZA,ANkBA;ARyBA,AKfA,AOrBA,ACHA,AFMA,AFMA,AMlBA,ALeA,AIZA,ANkBA;ARyBA,AKfA,AOrBA,ACHA,AFMA,AFMA,AMlBA,ALeA,AIZA,ANkBA;ARyBA,AKfA,AOrBA,ACHA,AFMA,AFMA,AMlBA,ALeA,AIZA,ANkBA;ARyBA,AKfA,AOrBA,ACHA,AFMA,AFMA,AMlBA,ALeA,AIZA,ANkBA;ARyBA,AKfA,AOrBA,ACHA,AFMA,AFMA,AMlBA,ALeA,AIZA,ANkBA;ARyBA,AKfA,AOrBA,ACHA,AFMA,AFMA,AMlBA,ALeA,AIZA,ANkBA;ARyBA,AKfA,AOrBA,ACHA,AFMA,AFMA,AMlBA,ALeA,AIZA,ANkBA;ARyBA,AKfA,AOrBA,ACHA,AFMA,AFMA,AMlBA,ALeA,AIZA,ANkBA;ARyBA,AKfA,AOrBA,ACHA,AFMA,AFMA,AMlBA,ALeA,AIZA,ANkBA;ARyBA,AKfA,AOrBA,ACHA,AFMA,AFMA,AMlBA,ALeA,AIZA,ANkBA;ARyBA,AKfA,AOrBA,ACHA,AFMA,AFMA,AMlBA,ALeA,AIZA,ANkBA;ARyBA,AKfA,AOrBA,ACHA,AFMA,AFMA,AMlBA,ALeA,AIZA,ANkBA;ARyBA,AKfA,AOrBA,ACHA,AFMA,AFMA,ACHA,AIZA,ANkBA;ARyBA,AKfA,AQxBA,AFMA,AFMA,ACHA,AIZA,ANkBA;ARyBA,AKfA,AQxBA,AFMA,AFMA,ACHA,AIZA,ANkBA;ARyBA,AKfA,AQxBA,AJYA,ACHA,AIZA,ANkBA;ARyBA,AKfA,AQxBA,AJYA,ACHA,AIZA,ANkBA;ARyBA,AKfA,AQxBA,AJYA,ACHA,AIZA,ANkBA;ARyBA,AKfA,AQxBA,AJYA,ACHA,AIZA,ANkBA;ARyBA,AKfA,AQxBA,AJYA,ACHA,AIZA,ANkBA;ARyBA,AKfA,AQxBA,AJYA,ACHA,AIZA,ANkBA;ARyBA,AKfA,AQxBA,AJYA,ACHA,AIZA,ANkBA;ARyBA,AKfA,AQxBA,AJYA,ACHA,AFMA;ARyBA,AKfA,AQxBA,AJYA,ACHA,AFMA;ARyBA,AKfA,AQxBA,AJYA,ACHA,AFMA;ARyBA,AKfA,AQxBA,AJYA,ACHA,AFMA;ARyBA,AKfA,AQxBA,AJYA,ACHA,AFMA;ARyBA,AKfA,AQxBA,AJYA,ACHA,AFMA;ARyBA,AKfA,AQxBA,AJYA,ACHA,AFMA;ARyBA,AKfA,AQxBA,AJYA,ACHA,AFMA;ARyBA,AKfA,AQxBA,AJYA,ACHA,AFMA;ARyBA,AKfA,AQxBA,AJYA,ACHA,AFMA;ARyBA,AKfA,AQxBA,AJYA,ACHA,AFMA;ARyBA,AKfA,AQxBA,AJYA,ACHA,AFMA;ARyBA,AKfA,AQxBA,AJYA,ACHA,AFMA;ARyBA,AKfA,AIZA,ACHA,AFMA;ARyBA,AKfA,AIZA,ACHA,AFMA;ARyBA,AKfA,AIZA,ACHA,AFMA;ARyBA,AKfA,AIZA,ACHA,AFMA;ARyBA,AKfA,AIZA,ACHA,AFMA;ARyBA,AKfA,AIZA,ADGA;ARyBA,AKfA,AGTA;ARyBA,AKfA,AGTA;ARyBA,AKfA,AGTA;ARyBA,AKfA,AGTA;ARyBA,AKfA,AGTA;ARyBA,AKfA,AGTA;ARyBA,AKfA,AGTA;ARyBA,AKfA,AGTA;ARyBA,AKfA,AGTA;ARyBA,AKfA,AGTA;ARyBA,AKfA,AGTA;ARyBA,AKfA,AGTA;ARyBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nvar fs = require('fs');\nvar path = require('path');\nvar log = require('gulplog');\nvar yargs = require('yargs');\nvar Liftoff = require('liftoff');\nvar interpret = require('interpret');\nvar v8flags = require('v8flags');\nvar findRange = require('semver-greatest-satisfied-range');\nvar ansi = require('./lib/shared/ansi');\nvar exit = require('./lib/shared/exit');\nvar tildify = require('./lib/shared/tildify');\nvar makeTitle = require('./lib/shared/make-title');\nvar cliOptions = require('./lib/shared/cli-options');\nvar completion = require('./lib/shared/completion');\nvar verifyDeps = require('./lib/shared/verify-dependencies');\nvar cliVersion = require('./package.json').version;\nvar getBlacklist = require('./lib/shared/get-blacklist');\nvar toConsole = require('./lib/shared/log/to-console');\n\nvar loadConfigFiles = require('./lib/shared/config/load-files');\nvar mergeConfigToCliFlags = require('./lib/shared/config/cli-flags');\nvar mergeConfigToEnvFlags = require('./lib/shared/config/env-flags');\n\n// Logging functions\nvar logVerify = require('./lib/shared/log/verify');\nvar logBlacklistError = require('./lib/shared/log/blacklist-error');\n\n// Get supported ranges\nvar ranges = fs.readdirSync(path.join(__dirname, '/lib/versioned/'));\n\n// Set env var for ORIGINAL cwd\n// before anything touches it\nprocess.env.INIT_CWD = process.cwd();\n\nvar cli = new Liftoff({\n  name: 'gulp',\n  processTitle: makeTitle('gulp', process.argv.slice(2)),\n  completions: completion,\n  extensions: interpret.jsVariants,\n  v8flags: v8flags,\n  configFiles: {\n    '.gulp': {\n      home: {\n        path: '~',\n        extensions: interpret.extensions,\n      },\n      cwd: {\n        path: '.',\n        extensions: interpret.extensions,\n      },\n    },\n  },\n});\n\nvar usage =\n  '\\n' + ansi.bold('Usage:') +\n  ' gulp ' + ansi.blue('[options]') + ' tasks';\n\nvar parser = yargs.usage(usage, cliOptions);\nvar opts = parser.argv;\n\ncli.on('require', function(name) {\n  // This is needed because interpret needs to stub the .mjs extension\n  // Without the .mjs require hook, rechoir blows up\n  // However, we don't want to show the mjs-stub loader in the logs\n  if (path.basename(name, '.js') !== 'mjs-stub') {\n    log.info('Requiring external module', ansi.magenta(name));\n  }\n});\n\ncli.on('requireFail', function(name, error) {\n  log.warn(\n    ansi.yellow('Failed to load external module'),\n    ansi.magenta(name)\n  );\n  /* istanbul ignore else */\n  if (error) {\n    log.warn(ansi.yellow(error.toString()));\n  }\n});\n\ncli.on('respawn', function(flags, child) {\n  var nodeFlags = ansi.magenta(flags.join(', '));\n  var pid = ansi.magenta(child.pid);\n  log.info('Node flags detected:', nodeFlags);\n  log.info('Respawned to PID:', pid);\n});\n\nfunction run() {\n  cli.prepare({\n    cwd: opts.cwd,\n    configPath: opts.gulpfile,\n    require: opts.require,\n    completion: opts.completion,\n  }, function(env) {\n    var cfgLoadOrder = ['home', 'cwd'];\n    var cfg = loadConfigFiles(env.configFiles['.gulp'], cfgLoadOrder);\n    opts = mergeConfigToCliFlags(opts, cfg);\n    env = mergeConfigToEnvFlags(env, cfg, opts);\n    env.configProps = cfg;\n\n    // Set up event listeners for logging again after configuring.\n    toConsole(log, opts);\n\n    cli.execute(env, env.nodeFlags, handleArguments);\n  });\n}\n\nmodule.exports = run;\n\n// The actual logic\nfunction handleArguments(env) {\n\n  // This translates the --continue flag in gulp\n  // To the settle env variable for undertaker\n  // We use the process.env so the user's gulpfile\n  // Can know about the flag\n  if (opts.continue) {\n    process.env.UNDERTAKER_SETTLE = 'true';\n  }\n\n  if (opts.help) {\n    parser.showHelp(console.log);\n    exit(0);\n  }\n\n  // Anything that needs to print outside of the logging mechanism should use console.log\n  if (opts.version) {\n    console.log('CLI version:', cliVersion);\n    console.log('Local version:', env.modulePackage.version || 'Unknown');\n    exit(0);\n  }\n\n  if (opts.verify) {\n    var pkgPath = opts.verify !== true ? opts.verify : 'package.json';\n    /* istanbul ignore else */\n    if (path.resolve(pkgPath) !== path.normalize(pkgPath)) {\n      pkgPath = path.join(env.cwd, pkgPath);\n    }\n    log.info('Verifying plugins in ' + pkgPath);\n    return getBlacklist(function(err, blacklist) {\n      /* istanbul ignore if */\n      if (err) {\n        return logBlacklistError(err);\n      }\n\n      var blacklisted = verifyDeps(require(pkgPath), blacklist);\n\n      logVerify(blacklisted);\n    });\n  }\n\n  if (!env.modulePath) {\n    /* istanbul ignore next */\n    var missingNodeModules =\n      fs.existsSync(path.join(env.cwd, 'package.json'))\n      && !fs.existsSync(path.join(env.cwd, 'node_modules'));\n\n    /* istanbul ignore next */\n    var missingGulpMessage =\n      missingNodeModules\n        ? 'Local modules not found in'\n        : 'Local gulp not found in';\n    log.error(\n      ansi.red(missingGulpMessage),\n      ansi.magenta(tildify(env.cwd))\n    );\n    var hasYarn = fs.existsSync(path.join(env.cwd, 'yarn.lock'));\n    /* istanbul ignore next */\n    var installCommand =\n      missingNodeModules\n        ? hasYarn\n          ? 'yarn install'\n          : 'npm install'\n        : hasYarn\n          ? 'yarn add gulp'\n        : 'npm install gulp';\n    log.error(ansi.red('Try running: ' + installCommand));\n    exit(1);\n  }\n\n  if (!env.configPath) {\n    log.error(ansi.red('No gulpfile found'));\n    exit(1);\n  }\n\n  // Chdir before requiring gulpfile to make sure\n  // we let them chdir as needed\n  if (process.cwd() !== env.cwd) {\n    process.chdir(env.cwd);\n    log.info(\n      'Working directory changed to',\n      ansi.magenta(tildify(env.cwd))\n    );\n  }\n\n  // Find the correct CLI version to run\n  var range = findRange(env.modulePackage.version, ranges);\n\n  if (!range) {\n    log.error(\n      ansi.red('Unsupported gulp version', env.modulePackage.version)\n    );\n    exit(1);\n  }\n\n  // Load and execute the CLI version\n  var versionedDir = path.join(__dirname, '/lib/versioned/', range, '/');\n  require(versionedDir)(opts, env, env.configProps);\n}\n","\n\nvar colors = require('ansi-colors');\nvar supportsColor = require('color-support');\n\nvar hasColors = colorize();\n\n/* istanbul ignore next */\nmodule.exports = {\n  red: hasColors ? colors.red : noColor,\n  green: hasColors ? colors.green : noColor,\n  blue: hasColors ? colors.blue : noColor,\n  magenta: hasColors ? colors.magenta : noColor,\n  cyan: hasColors ? colors.cyan : noColor,\n  white: hasColors ? colors.white : noColor,\n  gray: hasColors ? colors.gray : noColor,\n  bgred: hasColors ? colors.bgred : noColor,\n  bold: hasColors ? colors.bold : noColor,\n  yellow: hasColors ? colors.yellow : noColor,\n};\n\nfunction noColor(message) {\n  return message;\n}\n\nfunction hasFlag(flag) {\n  return (process.argv.indexOf('--' + flag) !== -1);\n}\n\nfunction colorize() {\n  if (hasFlag('no-color')) {\n    return false;\n  }\n\n  /* istanbul ignore if */\n  if (hasFlag('color')) {\n    return true;\n  }\n\n  return supportsColor();\n}\n","\n\n// Fix stdout truncation on windows\nfunction exit(code) {\n  /* istanbul ignore next */\n  if (process.platform === 'win32' && process.stdout.bufferSize) {\n    process.stdout.once('drain', function() {\n      process.exit(code);\n    });\n    return;\n  }\n  process.exit(code);\n}\n\nmodule.exports = exit;\n","\n\nvar replaceHomedir = require('replace-homedir');\n\nfunction tildify(filepath) {\n  return replaceHomedir(filepath, '~');\n}\n\nmodule.exports = tildify;\n","\n\nfunction makeTitle(cmd, argv) {\n  if (!argv || argv.length === 0) {\n    return cmd;\n  }\n\n  return [cmd].concat(argv).join(' ');\n}\n\nmodule.exports = makeTitle;\n","\n\nvar ansi = require('./ansi');\n\nmodule.exports = {\n  help: {\n    alias: 'h',\n    type: 'boolean',\n    desc: ansi.gray(\n      'Show this help.'),\n  },\n  version: {\n    alias: 'v',\n    type: 'boolean',\n    desc: ansi.gray(\n      'Print the global and local gulp versions.'),\n  },\n  require: {\n    type: 'string',\n    requiresArg: true,\n    desc: ansi.gray(\n      'Will require a module before running the gulpfile. ' +\n      'This is useful for transpilers but also has other applications.'),\n  },\n  gulpfile: {\n    alias: 'f',\n    type: 'string',\n    requiresArg: true,\n    desc: ansi.gray(\n      'Manually set path of gulpfile. Useful if you have multiple gulpfiles. ' +\n      'This will set the CWD to the gulpfile directory as well.'),\n  },\n  cwd: {\n    type: 'string',\n    requiresArg: true,\n    desc: ansi.gray(\n      'Manually set the CWD. The search for the gulpfile, ' +\n      'as well as the relativity of all requires will be from here.'),\n  },\n  verify: {\n    desc: ansi.gray(\n      'Will verify plugins referenced in project\\'s package.json against ' +\n      'the plugins blacklist.'),\n  },\n  tasks: {\n    alias: 'T',\n    type: 'boolean',\n    desc: ansi.gray(\n      'Print the task dependency tree for the loaded gulpfile.'),\n  },\n  'tasks-simple': {\n    type: 'boolean',\n    desc: ansi.gray(\n      'Print a plaintext list of tasks for the loaded gulpfile.'),\n  },\n  'tasks-json': {\n    desc: ansi.gray(\n      'Print the task dependency tree, ' +\n      'in JSON format, for the loaded gulpfile.'),\n  },\n  'tasks-depth': {\n    alias: 'depth',\n    type: 'number',\n    requiresArg: true,\n    default: undefined,  // To detect if this cli option is specified.\n    desc: ansi.gray(\n      'Specify the depth of the task dependency tree.'),\n  },\n  'compact-tasks': {\n    type: 'boolean',\n    default: undefined,  // To detect if this cli option is specified.\n    desc: ansi.gray(\n      'Reduce the output of task dependency tree by printing ' +\n      'only top tasks and their child tasks.'),\n  },\n  'sort-tasks': {\n    type: 'boolean',\n    default: undefined,  // To detect if this cli option is specified.\n    desc: ansi.gray(\n      'Will sort top tasks of task dependency tree.'),\n  },\n  color: {\n    type: 'boolean',\n    desc: ansi.gray(\n      'Will force gulp and gulp plugins to display colors, ' +\n      'even when no color support is detected.'),\n  },\n  'no-color': {\n    type: 'boolean',\n    desc: ansi.gray(\n      'Will force gulp and gulp plugins to not display colors, ' +\n      'even when color support is detected.'),\n  },\n  silent: {\n    alias: 'S',\n    type: 'boolean',\n    default: undefined,  // To detect if this cli option is specified.\n    desc: ansi.gray(\n      'Suppress all gulp logging.'),\n  },\n  continue: {\n    type: 'boolean',\n    default: undefined,  // To detect if this cli option is specified.\n    desc: ansi.gray(\n      'Continue execution of tasks upon failure.'),\n  },\n  series: {\n    type: 'boolean',\n    default: undefined,  // To detect if this cli option is specified.\n    desc: ansi.gray(\n      'Run tasks given on the CLI in series (the default is parallel).'),\n  },\n  'log-level': {\n    alias: 'L',\n    // Type isn't needed because count acts as a boolean\n    count: true,\n    default: undefined,  // To detect if this cli option is specified.\n    desc: ansi.gray(\n      'Set the loglevel. -L for least verbose and -LLLL for most verbose. ' +\n      '-LLL is default.'),\n  },\n};\n","\n\nvar fs = require('fs');\nvar path = require('path');\n\nmodule.exports = function(name) {\n  if (typeof name !== 'string') {\n    throw new Error('Missing completion type');\n  }\n  var file = path.join(__dirname, '../../completion', name);\n  try {\n    console.log(fs.readFileSync(file, 'utf8'));\n    process.exit(0);\n  } catch (err) {\n    console.log(\n      'echo \"gulp autocompletion rules for',\n      '\\'' + name + '\\'',\n      'not found\"'\n    );\n    process.exit(5);\n  }\n};\n","\n\nvar matchdep = require('matchdep');\n\n/**\n * Given a collection of plugin names verifies this collection against\n * the blacklist. Returns an object with:\n * [plugin name]=>[blacklisting reason]\n * or an empty object if none of the dependencies to check are blacklisted.\n *\n * @param pkg - package.json contents\n * @param blacklist - contents of the blacklist in JSON format\n */\nfunction verifyDependencies(pkg, blacklist) {\n  var blacklisted = matchdep\n    .filterAll(Object.keys(blacklist), pkg)\n    .reduce(function(blacklisted, pluginName) {\n      blacklisted[pluginName] = blacklist[pluginName];\n      return blacklisted;\n    }, {});\n\n  return blacklisted;\n}\n\nmodule.exports = verifyDependencies;\n","module.exports = {\n  \"name\": \"gulp-cli\",\n  \"version\": \"2.3.0\",\n  \"description\": \"Command line interface for gulp\",\n  \"author\": \"Gulp Team <team@gulpjs.com> (https://gulpjs.com/)\",\n  \"contributors\": [],\n  \"homepage\": \"https://gulpjs.com\",\n  \"repository\": \"gulpjs/gulp-cli\",\n  \"license\": \"MIT\",\n  \"man\": \"gulp.1\",\n  \"engines\": {\n    \"node\": \">= 0.10\"\n  },\n  \"main\": \"index.js\",\n  \"bin\": {\n    \"gulp\": \"bin/gulp.js\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"lib\",\n    \"bin\",\n    \"completion\",\n    \"gulp.1\"\n  ],\n  \"scripts\": {\n    \"lint\": \"eslint .\",\n    \"prepublish\": \"marked-man --name gulp docs/CLI.md > gulp.1\",\n    \"pretest\": \"npm run lint\",\n    \"test\": \"mocha --async-only --timeout 5000 test/lib test\",\n    \"cover\": \"nyc --reporter=lcov --reporter=text-summary npm test\",\n    \"coveralls\": \"nyc --reporter=text-lcov npm test | coveralls\"\n  },\n  \"dependencies\": {\n    \"ansi-colors\": \"^1.0.1\",\n    \"archy\": \"^1.0.0\",\n    \"array-sort\": \"^1.0.0\",\n    \"concat-stream\": \"^1.6.0\",\n    \"color-support\": \"^1.1.3\",\n    \"copy-props\": \"^2.0.1\",\n    \"fancy-log\": \"^1.3.2\",\n    \"gulplog\": \"^1.0.0\",\n    \"interpret\": \"^1.4.0\",\n    \"isobject\": \"^3.0.1\",\n    \"liftoff\": \"^3.1.0\",\n    \"matchdep\": \"^2.0.0\",\n    \"mute-stdout\": \"^1.0.0\",\n    \"pretty-hrtime\": \"^1.0.0\",\n    \"replace-homedir\": \"^1.0.0\",\n    \"semver-greatest-satisfied-range\": \"^1.1.0\",\n    \"v8flags\": \"^3.2.0\",\n    \"yargs\": \"^7.1.0\"\n  },\n  \"devDependencies\": {\n    \"babel-preset-es2015\": \"^6.5.0\",\n    \"babel-register\": \"^6.5.1\",\n    \"coveralls\": \"^3.0.3\",\n    \"eslint\": \"^2.13.1\",\n    \"eslint-config-gulp\": \"^3.0.1\",\n    \"expect\": \"^1.20.2\",\n    \"gulp\": \"^4.0.0\",\n    \"gulp-test-tools\": \"^0.6.1\",\n    \"marked-man\": \"^0.2.1\",\n    \"mocha\": \"^3.2.0\",\n    \"nyc\": \"^13.3.0\",\n    \"rimraf\": \"^2.6.1\",\n    \"semver\": \"^5.7.1\"\n  },\n  \"keywords\": [\n    \"build\",\n    \"stream\",\n    \"system\",\n    \"make\",\n    \"tool\",\n    \"asset\",\n    \"pipeline\"\n  ]\n}\n","\n\nvar https = require('https');\n\nvar concat = require('concat-stream');\n\nvar url = 'https://raw.githubusercontent.com/gulpjs/plugins/master/src/blackList.json';\n\nfunction collect(stream, cb) {\n  stream.on('error', cb);\n  stream.pipe(concat(onSuccess));\n\n  function onSuccess(result) {\n    cb(null, result);\n  }\n}\n\nfunction parse(str, cb) {\n  try {\n    cb(null, JSON.parse(str));\n  } catch (err) {\n    /* istanbul ignore next */\n    cb(new Error('Invalid Blacklist JSON.'));\n  }\n}\n\n// TODO: Test this impl\nfunction getBlacklist(cb) {\n  https.get(url, onRequest);\n\n  function onRequest(res) {\n    /* istanbul ignore if */\n    if (res.statusCode !== 200) {\n      // TODO: Test different status codes\n      return cb(new Error('Request failed. Status Code: ' + res.statusCode));\n    }\n\n    res.setEncoding('utf8');\n\n    collect(res, onCollect);\n  }\n\n  function onCollect(err, result) {\n    /* istanbul ignore if */\n    if (err) {\n      return cb(err);\n    }\n\n    parse(result, onParse);\n  }\n\n  function onParse(err, blacklist) {\n    /* istanbul ignore if */\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, blacklist);\n  }\n}\n\nmodule.exports = getBlacklist;\n","\n\nvar fancyLog = require('fancy-log');\n\n/* istanbul ignore next */\nfunction noop() {}\n\n// The sorting of the levels is\n// significant.\nvar levels = [\n  'error', // -L: Logs error events.\n  'warn',  // -LL: Logs warn and error events.\n  'info',  // -LLL: Logs info, warn and error events.\n  'debug', // -LLLL: Logs all log levels.\n];\n\nfunction cleanup(log) {\n  levels.forEach(removeListeners);\n\n  function removeListeners(level) {\n    if (level === 'error') {\n      log.removeListener(level, noop);\n      log.removeListener(level, fancyLog.error);\n    } else {\n      log.removeListener(level, fancyLog);\n    }\n  }\n}\n\nfunction toConsole(log, opts) {\n  // Remove previous listeners to enable to call this twice.\n  cleanup(log);\n\n  // Return immediately if logging is\n  // not desired.\n  if (opts.tasksSimple || opts.tasksJson || opts.help || opts.version || opts.silent) {\n    // Keep from crashing process when silent.\n    log.on('error', noop);\n    return;\n  }\n\n  // Default loglevel to info level (3).\n  var loglevel = opts.logLevel || 3;\n\n  levels\n    .filter(function(item, i) {\n      return i < loglevel;\n    })\n    .forEach(function(level) {\n      if (level === 'error') {\n        log.on(level, fancyLog.error);\n      } else {\n        log.on(level, fancyLog);\n      }\n    });\n}\n\nmodule.exports = toConsole;\n","\n\nvar copyProps = require('copy-props');\nvar path = require('path');\n\nfunction loadConfigFiles(configFiles, configFileOrder) {\n  var config = {};\n\n  configFileOrder.forEach(loadFile);\n\n  function loadFile(key) {\n    var filePath = configFiles[key];\n    if (!filePath) {\n      return;\n    }\n\n    copyProps(require(filePath), config, convert);\n\n    function convert(loadedInfo) {\n      if (loadedInfo.keyChain === 'flags.gulpfile') {\n        return path.resolve(path.dirname(filePath), loadedInfo.value);\n      }\n      return loadedInfo.value;\n    }\n  }\n\n  return config;\n}\n\nmodule.exports = loadConfigFiles;\n","\n\nvar copyProps = require('copy-props');\n\nvar fromTo = {\n  'flags.silent': 'silent',\n  'flags.continue': 'continue',\n  'flags.series': 'series',\n  'flags.logLevel': 'logLevel',\n  'flags.compactTasks': 'compactTasks',\n  'flags.tasksDepth': 'tasksDepth',\n  'flags.sortTasks': 'sortTasks',\n};\n\nfunction mergeConfigToCliFlags(opt, config) {\n  return copyProps(config, opt, fromTo, defaults);\n}\n\nfunction defaults(cfgInfo, optInfo) {\n  if (optInfo.value === undefined) {\n    return cfgInfo.value;\n  }\n}\n\nmodule.exports = mergeConfigToCliFlags;\n","\n\nvar path = require('path');\nvar copyProps = require('copy-props');\n\nvar toFrom = {\n  configPath: 'flags.gulpfile',\n  configBase: 'flags.gulpfile',\n  require: 'flags.require',\n  nodeFlags: 'flags.nodeFlags',\n};\n\nfunction mergeConfigToEnvFlags(env, config, cliOpts) {\n  // This must reverse because `flags.gulpfile` determines 2 different properties\n  var reverse = true;\n  return copyProps(env, config, toFrom, convert, reverse);\n\n  function convert(configInfo, envInfo) {\n    if (envInfo.keyChain === 'configBase') {\n      if (cliOpts.gulpfile === undefined) {\n        return path.dirname(configInfo.value);\n      }\n      return;\n    }\n\n    if (envInfo.keyChain === 'configPath') {\n      if (cliOpts.gulpfile === undefined) {\n        return configInfo.value;\n      }\n      return;\n    }\n\n    if (envInfo.keyChain === 'require') {\n      return [].concat(envInfo.value, configInfo.value);\n    }\n\n    /* istanbul ignore else */\n    if (envInfo.keyChain === 'nodeFlags') {\n      return [].concat(configInfo.value || []);\n    }\n  }\n}\n\nmodule.exports = mergeConfigToEnvFlags;\n","\n\nvar log = require('gulplog');\n\nvar ansi = require('../ansi');\nvar exit = require('../exit');\n\nfunction logVerify(blacklisted) {\n  var pluginNames = Object.keys(blacklisted);\n\n  if (!pluginNames.length) {\n    log.info(\n      ansi.green('There are no blacklisted plugins in this project')\n    );\n    exit(0);\n  }\n\n  log.warn(ansi.red('Blacklisted plugins found in this project:'));\n\n  pluginNames.map(function(pluginName) {\n    var reason = blacklisted[pluginName];\n    log.warn(ansi.bgred(pluginName) + ': ' + reason);\n  });\n\n  exit(1);\n}\n\nmodule.exports = logVerify;\n","\n\nvar log = require('gulplog');\n\nvar ansi = require('../ansi');\nvar exit = require('../exit');\n\n/* istanbul ignore next */\nfunction logBlacklistError(err) {\n  log.error(ansi.red('Error: failed to retrieve plugins black-list'));\n  log.error(err.message); // Avoid duplicating for each version\n  exit(1);\n}\n\nmodule.exports = logBlacklistError;\n"]}