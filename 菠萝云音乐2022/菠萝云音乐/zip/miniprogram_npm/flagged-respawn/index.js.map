{"version":3,"sources":["index.js","lib/reorder.js","lib/is-v8flags.js","lib/respawn.js","lib/remover.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA,AENA;AHUA,AENA,ADGA,AENA;AHUA,AENA,ADGA,AENA;AHUA,AENA,AENA,AHSA,AENA;AHUA,AENA,AENA,AHSA,AENA;AHUA,AENA,AENA,AHSA,AENA;AHUA,AENA,AENA,AHSA,AENA;AHUA,AENA,AENA,AHSA,AENA;AHUA,AENA,AENA,AHSA,AENA;AHUA,AENA,AENA,AHSA,AENA;AHUA,AENA,AENA,AHSA,AENA;AHUA,AIZA,AHSA,AENA;AHUA,AIZA,AHSA,AENA;AHUA,AIZA,ADGA;AHUA,AIZA,ADGA;AHUA,AIZA,ADGA;AHUA,AIZA,ADGA;AHUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["var reorder = require('./lib/reorder');\nvar respawn = require('./lib/respawn');\nvar remover = require('./lib/remover');\n\nvar FORBID_RESPAWNING_FLAG = '--no-respawning';\n\nmodule.exports = function(flags, argv, forcedFlags, execute) {\n  if (!flags) {\n    throw new Error('You must specify flags to respawn with.');\n  }\n  if (!argv) {\n    throw new Error('You must specify an argv array.');\n  }\n\n  if (typeof forcedFlags === 'function') {\n    execute = forcedFlags;\n    forcedFlags = [];\n  }\n\n  if (typeof forcedFlags === 'string') {\n    forcedFlags = [forcedFlags];\n  }\n\n  if (!Array.isArray(forcedFlags)) {\n    forcedFlags = [];\n  }\n\n  var index = argv.indexOf(FORBID_RESPAWNING_FLAG);\n  if (index >= 0) {\n    argv = argv.slice(0, index).concat(argv.slice(index + 1));\n    argv = remover(flags, argv);\n    execute(true, process, argv);\n    return;\n  }\n\n  var proc = process;\n  var reordered = reorder(flags, argv);\n  var ready = JSON.stringify(argv) === JSON.stringify(reordered);\n\n  if (forcedFlags.length) {\n    reordered = reordered.slice(0, 1)\n      .concat(forcedFlags)\n      .concat(reordered.slice(1));\n    ready = false;\n  }\n\n  if (!ready) {\n    reordered.push(FORBID_RESPAWNING_FLAG);\n    proc = respawn(reordered);\n  }\n  execute(ready, proc, reordered);\n};\n","var isV8flags = require('./is-v8flags');\n\nmodule.exports = function(flags, argv) {\n  if (!argv) {\n    argv = process.argv;\n  }\n  var args = [argv[1]];\n  argv.slice(2).forEach(function(arg) {\n    var flag = arg.split('=')[0];\n    if (isV8flags(flag, flags)) {\n      args.unshift(arg);\n    } else {\n      args.push(arg);\n    }\n  });\n  args.unshift(argv[0]);\n  return args;\n};\n","function isV8flags(flag, v8flags) {\n  return v8flags.indexOf(replaceSeparatorsFromDashesToUnderscores(flag)) >= 0;\n}\n\nfunction replaceSeparatorsFromDashesToUnderscores(flag) {\n  var arr = /^(-+)(.*)$/.exec(flag);\n  if (!arr) {\n    return flag;\n  }\n  return arr[1] + arr[2].replace(/\\-/g, '_');\n}\n\nmodule.exports = isV8flags;\n","var spawn = require('child_process').spawn;\n\nmodule.exports = function(argv) {\n  var child = spawn(argv[0], argv.slice(1), { stdio: 'inherit' });\n  child.on('exit', function(code, signal) {\n    process.on('exit', function() {\n      /* istanbul ignore if */\n      if (signal) {\n        process.kill(process.pid, signal);\n      } else {\n        process.exit(code);\n      }\n    });\n  });\n  return child;\n};\n","var isV8flags = require('./is-v8flags');\n\nmodule.exports = function(flags, argv) {\n  var args = argv.slice(0, 1);\n  for (var i = 1, n = argv.length; i < n; i++) {\n    var arg = argv[i];\n    var flag = arg.split('=')[0];\n    if (!isV8flags(flag, flags)) {\n      args.push(arg);\n    }\n  }\n  return args;\n};\n"]}