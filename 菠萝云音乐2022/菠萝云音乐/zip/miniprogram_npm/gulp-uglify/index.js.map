{"version":3,"sources":["index.js","composer.js","lib/minify.js","lib/create-error.js","lib/gulp-uglify-error.js","lib/log.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AGTA,ADGA;ADIA,ADGA,AGTA,ADGA;ADIA,ADGA,AGTA,ADGA;ADIA,ADGA,AGTA,ACHA,AFMA;ADIA,ADGA,AGTA,ACHA,AFMA;ADIA,ADGA,AGTA,ACHA,AFMA;ADIA,AENA,ACHA,ACHA,AHSA;ADIA,AENA,ACHA,ACHA,AHSA;ADIA,AENA,ACHA,ACHA,AHSA;ADIA,AENA,ACHA,ACHA,AHSA;ADIA,AENA,ACHA,ACHA,AHSA;ADIA,AENA,ACHA,ACHA,AHSA;ADIA,AENA,ACHA,ACHA,AHSA;ADIA,AGTA,ACHA,AHSA;AELA,ACHA,AHSA;AELA,ACHA,AHSA;AELA,ACHA,AHSA;AELA,ACHA,AHSA;AELA,ACHA,AHSA;AELA,ACHA,AHSA;AGRA,AHSA;AGRA,AHSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nvar uglify = require('uglify-js');\nvar compose = require('./composer');\nvar GulpUglifyError = require('./lib/gulp-uglify-error');\nvar logger = require('./lib/log');\n\nmodule.exports = function(opts) {\n  return compose(\n    uglify,\n    logger\n  )(opts);\n};\n\nmodule.exports.GulpUglifyError = GulpUglifyError;\n","\nvar through = require('through2');\nvar minify = require('./lib/minify');\n\nmodule.exports = function(uglify, logger) {\n  return function(opts) {\n    var minifier = minify(uglify, logger)(opts);\n    return through.obj(function(file, encoding, callback) {\n      var newFile = null;\n      var err = null;\n      try {\n        newFile = minifier(file);\n      } catch (e) {\n        err = e;\n      }\n      callback(err, newFile);\n    });\n  };\n};\n","\nvar Buffer = require('safe-buffer').Buffer;\nvar applySourceMap = require('vinyl-sourcemaps-apply');\nvar isObject = require('isobject');\nvar extend = require('extend-shallow');\nvar createError = require('./create-error');\n\nmodule.exports = function(uglify, log) {\n  function setup(opts) {\n    if (opts && !isObject(opts)) {\n      log.warn('gulp-uglify expects an object, non-object provided');\n      opts = {};\n    }\n\n    return extend(\n      {},\n      {\n        output: {}\n      },\n      opts\n    );\n  }\n\n  return function(opts) {\n    return function(file) {\n      var options = setup(opts || {});\n      var hasSourceMaps = Boolean(file.sourceMap);\n\n      if (file.isNull()) {\n        return file;\n      }\n\n      if (file.isStream()) {\n        throw createError(file, 'Streaming not supported', null);\n      }\n\n      if (hasSourceMaps) {\n        options.sourceMap = {\n          filename: file.sourceMap.file,\n          includeSources: true\n        };\n\n        // UglifyJS generates broken source maps if the input source map\n        // does not contain mappings.\n        if (file.sourceMap.mappings) {\n          options.sourceMap.content = file.sourceMap;\n        }\n      }\n\n      var fileMap = {};\n      fileMap[file.relative] = String(file.contents);\n\n      var mangled = uglify.minify(fileMap, options);\n\n      if (!mangled || mangled.error) {\n        throw createError(\n          file,\n          'unable to minify JavaScript',\n          mangled && mangled.error\n        );\n      }\n\n      if (mangled.warnings) {\n        mangled.warnings.forEach(function(warning) {\n          log.warn('gulp-uglify [%s]: %s', file.relative, warning);\n        });\n      }\n\n      file.contents = Buffer.from(mangled.code);\n\n      if (hasSourceMaps) {\n        var sourceMap = JSON.parse(mangled.map);\n        applySourceMap(file, sourceMap);\n      }\n\n      return file;\n    };\n  };\n};\n","\nvar GulpUglifyError = require('./gulp-uglify-error');\n\nfunction createError(file, msg, cause) {\n  var perr = new GulpUglifyError(msg, cause);\n  perr.plugin = 'gulp-uglify';\n  perr.fileName = file.path;\n  perr.showStack = false;\n  return perr;\n}\n\nmodule.exports = createError;\n","\nvar makeErrorCause = require('make-error-cause');\n\nvar gulpUglifyError = makeErrorCause('GulpUglifyError');\ngulpUglifyError.prototype.toString = function() {\n  var cause = this.cause || {};\n\n  return (\n    makeErrorCause.BaseError.prototype.toString.call(this) +\n    (this.fileName ? '\\nFile: ' + this.fileName : '') +\n    (cause.line ? '\\nLine: ' + cause.line : '') +\n    (cause.col ? '\\nCol: ' + cause.col : '')\n  );\n};\n\nmodule.exports = gulpUglifyError;\n","\nvar hasLog = require('has-gulplog');\nvar each = require('array-each');\n\nvar levels = ['debug', 'info', 'warn', 'error'];\n\neach(levels, function(level) {\n  module.exports[level] = function() {\n    if (hasLog()) {\n      var log = require('gulplog');\n\n      log[level].apply(log, arguments);\n    }\n  };\n});\n"]}