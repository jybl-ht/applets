{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/*!\n * ansi-colors <https://github.com/doowb/ansi-colors>\n *\n * Copyright (c) 2015-2017, Brian Woodward.\n * Released under the MIT License.\n */\n\n\n\n/**\n * Module dependencies\n */\n\nvar wrap = require('ansi-wrap');\n\n/**\n * Wrap a string with ansi codes to create a black background.\n *\n * ```js\n * console.log(colors.bgblack('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  bgblack\n */\n\nexports.bgblack = function bgblack(message) {\n  return wrap(40, 49, message);\n};\n\n/**\n * Wrap a string with ansi codes to create a blue background.\n *\n * ```js\n * console.log(colors.bgblue('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  bgblue\n */\n\nexports.bgblue = function bgblue(message) {\n  return wrap(44, 49, message);\n};\n\n/**\n * Wrap a string with ansi codes to create a cyan background.\n *\n * ```js\n * console.log(colors.bgcyan('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  bgcyan\n */\n\nexports.bgcyan = function bgcyan(message) {\n  return wrap(46, 49, message);\n};\n\n/**\n * Wrap a string with ansi codes to create a green background.\n *\n * ```js\n * console.log(colors.bggreen('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  bggreen\n */\n\nexports.bggreen = function bggreen(message) {\n  return wrap(42, 49, message);\n};\n\n/**\n * Wrap a string with ansi codes to create a magenta background.\n *\n * ```js\n * console.log(colors.bgmagenta('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  bgmagenta\n */\n\nexports.bgmagenta = function bgmagenta(message) {\n  return wrap(45, 49, message);\n};\n\n/**\n * Wrap a string with ansi codes to create a red background.\n *\n * ```js\n * console.log(colors.bgred('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  bgred\n */\n\nexports.bgred = function bgred(message) {\n  return wrap(41, 49, message);\n};\n\n/**\n * Wrap a string with ansi codes to create a white background.\n *\n * ```js\n * console.log(colors.bgwhite('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  bgwhite\n */\n\nexports.bgwhite = function bgwhite(message) {\n  return wrap(47, 49, message);\n};\n\n/**\n * Wrap a string with ansi codes to create a yellow background.\n *\n * ```js\n * console.log(colors.bgyellow('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  bgyellow\n */\n\nexports.bgyellow = function bgyellow(message) {\n  return wrap(43, 49, message);\n};\n\n/**\n * Wrap a string with ansi codes to create black text.\n *\n * ```js\n * console.log(colors.black('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  black\n */\n\nexports.black = function black(message) {\n  return wrap(30, 39, message);\n};\n\n/**\n * Wrap a string with ansi codes to create blue text.\n *\n * ```js\n * console.log(colors.blue('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  blue\n */\n\nexports.blue = function blue(message) {\n  return wrap(34, 39, message);\n};\n\n/**\n * Wrap a string with ansi codes to create bold text.\n *\n * ```js\n * console.log(colors.bold('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  bold\n */\n\nexports.bold = function bold(message) {\n  return wrap(1, 22, message);\n};\n\n/**\n * Wrap a string with ansi codes to create cyan text.\n *\n * ```js\n * console.log(colors.cyan('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  cyan\n */\n\nexports.cyan = function cyan(message) {\n  return wrap(36, 39, message);\n};\n\n/**\n * Wrap a string with ansi codes to create dim text.\n *\n * ```js\n * console.log(colors.dim('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  dim\n */\n\nexports.dim = function dim(message) {\n  return wrap(2, 22, message);\n};\n\n/**\n * Wrap a string with ansi codes to create gray text.\n *\n * ```js\n * console.log(colors.gray('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  gray\n */\n\nexports.gray = function gray(message) {\n  return wrap(90, 39, message);\n};\n\n/**\n * Wrap a string with ansi codes to create green text.\n *\n * ```js\n * console.log(colors.green('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  green\n */\n\nexports.green = function green(message) {\n  return wrap(32, 39, message);\n};\n\n/**\n * Wrap a string with ansi codes to create grey text.\n *\n * ```js\n * console.log(colors.grey('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  grey\n */\n\nexports.grey = function grey(message) {\n  return wrap(90, 39, message);\n};\n\n/**\n * Wrap a string with ansi codes to create hidden text.\n *\n * ```js\n * console.log(colors.hidden('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  hidden\n */\n\nexports.hidden = function hidden(message) {\n  return wrap(8, 28, message);\n};\n\n/**\n * Wrap a string with ansi codes to create inverse text.\n *\n * ```js\n * console.log(colors.inverse('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  inverse\n */\n\nexports.inverse = function inverse(message) {\n  return wrap(7, 27, message);\n};\n\n/**\n * Wrap a string with ansi codes to create italic text.\n *\n * ```js\n * console.log(colors.italic('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  italic\n */\n\nexports.italic = function italic(message) {\n  return wrap(3, 23, message);\n};\n\n/**\n * Wrap a string with ansi codes to create magenta text.\n *\n * ```js\n * console.log(colors.magenta('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  magenta\n */\n\nexports.magenta = function magenta(message) {\n  return wrap(35, 39, message);\n};\n\n/**\n * Wrap a string with ansi codes to create red text.\n *\n * ```js\n * console.log(colors.red('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  red\n */\n\nexports.red = function red(message) {\n  return wrap(31, 39, message);\n};\n\n/**\n * Wrap a string with ansi codes to reset ansi colors currently on the string.\n *\n * ```js\n * console.log(colors.reset('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  reset\n */\n\nexports.reset = function reset(message) {\n  return wrap(0, 0, message);\n};\n\n/**\n * Wrap a string with ansi codes to add a strikethrough to the text.\n *\n * ```js\n * console.log(colors.strikethrough('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  strikethrough\n */\n\nexports.strikethrough = function strikethrough(message) {\n  return wrap(9, 29, message);\n};\n\n/**\n * Wrap a string with ansi codes to underline the text.\n *\n * ```js\n * console.log(colors.underline('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  underline\n */\n\nexports.underline = function underline(message) {\n  return wrap(4, 24, message);\n};\n\n/**\n * Wrap a string with ansi codes to create white text.\n *\n * ```js\n * console.log(colors.white('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  white\n */\n\nexports.white = function white(message) {\n  return wrap(37, 39, message);\n};\n\n/**\n * Wrap a string with ansi codes to create yellow text.\n *\n * ```js\n * console.log(colors.yellow('some string'));\n * ```\n *\n * @param  {string} message String to wrap with ansi codes.\n * @return {string} Wrapped string\n * @api public\n * @name  yellow\n */\n\nexports.yellow = function yellow(message) {\n  return wrap(33, 39, message);\n};\n"]}